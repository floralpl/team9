<<<<<<< HEAD
import type { TSchema, SchemaOptions } from '../schema/index';
import type { TConstructor } from '../constructor/index';
export type TInstanceType<T extends TConstructor<TSchema[], TSchema>> = T['returns'];
/** `[JavaScript]` Extracts the InstanceType from the given Constructor type */
export declare function InstanceType<T extends TConstructor<any[], any>>(schema: T, options?: SchemaOptions): TInstanceType<T>;
=======
import { type TSchema, SchemaOptions } from '../schema/index';
import { type TConstructor } from '../constructor/index';
import { type TNever } from '../never/index';
export type TInstanceType<Type extends TSchema, Result extends TSchema = Type extends TConstructor<infer _Parameters extends TSchema[], infer InstanceType extends TSchema> ? InstanceType : TNever> = Result;
/** `[JavaScript]` Extracts the InstanceType from the given Constructor type */
export declare function InstanceType<Type extends TSchema>(schema: Type, options?: SchemaOptions): TInstanceType<Type>;
>>>>>>> dd36f794aec55329dba52bd59bdd29e0d232b50c
