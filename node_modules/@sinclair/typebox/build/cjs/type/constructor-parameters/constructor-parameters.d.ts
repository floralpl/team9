import type { TSchema, SchemaOptions } from '../schema/index';
<<<<<<< HEAD
import type { Ensure } from '../helpers/index';
import type { TConstructor } from '../constructor/index';
import { type TTuple } from '../tuple/index';
export type TConstructorParameters<T extends TConstructor<TSchema[], TSchema>> = (Ensure<TTuple<T['parameters']>>);
/** `[JavaScript]` Extracts the ConstructorParameters from the given Constructor type */
export declare function ConstructorParameters<T extends TConstructor<TSchema[], TSchema>>(schema: T, options?: SchemaOptions): TConstructorParameters<T>;
=======
import type { TConstructor } from '../constructor/index';
import { type TTuple } from '../tuple/index';
import { type TNever } from '../never/index';
export type TConstructorParameters<Type extends TSchema> = (Type extends TConstructor<infer Parameters extends TSchema[], infer _InstanceType extends TSchema> ? TTuple<Parameters> : TNever);
/** `[JavaScript]` Extracts the ConstructorParameters from the given Constructor type */
export declare function ConstructorParameters<Type extends TSchema>(schema: Type, options?: SchemaOptions): TConstructorParameters<Type>;
>>>>>>> dd36f794aec55329dba52bd59bdd29e0d232b50c
